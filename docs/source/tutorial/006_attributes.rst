.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_006_attributes.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorial_006_attributes.py:


.. _attributes:

User Attributes
===============

This feature is to annotate experiments with user-defined attributes.

Adding User Attributes to Studies
---------------------------------

A :class:`~optuna.study.Study` object provides :func:`~optuna.study.Study.set_user_attr` method
to register a pair of key and value as an user-defined attribute.
A key is supposed to be a ``str``, and a value be any object serializable with ``json.dumps``.


.. code-block:: default


    import sklearn.datasets
    import sklearn.svm
    import sklearn.model_selection
    import optuna
    study = optuna.create_study(storage='sqlite:///example.db')
    study.set_user_attr('contributors', ['Akiba', 'Sano'])
    study.set_user_attr('dataset', 'MNIST')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/harutakakawamura/.pyenv/versions/miniconda3-4.7.12/envs/optuna-dev-env/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject
      return f(*args, **kwds)




We can access annotated attributes with :attr:`~optuna.study.Study.user_attr` property.


.. code-block:: default



    study.user_attrs  # {'contributors': ['Akiba', 'Sano'], 'dataset': 'MNIST'}





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'contributors': ['Akiba', 'Sano'], 'dataset': 'MNIST'}



:class:`~optuna.struct.StudySummary` object, which can be retrieved by
:func:`~optuna.study.get_all_study_summaries`, also contains user-defined attributes.


.. code-block:: default



    study_summaries = optuna.get_all_study_summaries('sqlite:///example.db')
    study_summaries[0].user_attrs  # {'contributors': ['Akiba', 'Sano'], 'dataset': 'MNIST'}






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'contributors': ['Akiba', 'Sano'], 'dataset': 'MNIST'}



.. seealso::
    ``optuna study set-user-attr`` command, which sets an attribute via command line interface.

Adding User Attributes to Trials
--------------------------------

As with :class:`~optuna.study.Study`, a :class:`~optuna.trial.Trial` object provides
:func:`~optuna.trial.Trial.set_user_attr` method.
Attributes are set inside an objective function.


.. code-block:: default



    def objective(trial):
        iris = sklearn.datasets.load_iris()
        x, y = iris.data, iris.target

        svc_c = trial.suggest_loguniform('svc_c', 1e-10, 1e10)
        clf = sklearn.svm.SVC(C=svc_c)
        accuracy = sklearn.model_selection.cross_val_score(clf, x, y).mean()

        trial.set_user_attr('accuracy', accuracy)

        return 1.0 - accuracy  # return error for minimization


    study.optimize(objective, n_trials=1)








We can access annotated attributes as:


.. code-block:: default


    study.trials[0].user_attrs





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'accuracy': 0.9266666666666667}



Note that, in this example, the attribute is not annotated to a :class:`~optuna.study.Study`
but a single :class:`~optuna.trial.Trial`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.167 seconds)


.. _sphx_glr_download_tutorial_006_attributes.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 006_attributes.py <006_attributes.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 006_attributes.ipynb <006_attributes.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
